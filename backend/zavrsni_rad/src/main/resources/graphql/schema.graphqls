schema{
    query: Query
    mutation: Mutation
}

type Query{
    recipes(filter: Filter!): Recipes!
    singleRecipe(recipeId: ID!): Recipe!
    userForId(userId: ID!): Users!
}

type Mutation{
    login(identifier: String!,password:String!): LoginResponse!
    register(payload: RegisterRequest!): Users!
    addRecipe(payload: RecipePayload!): Recipe!
    editFavorite(userId: ID!, recipeId: ID!, state: Boolean!): Boolean!
    deleteRecipe(recipeId: ID!): Boolean!
    addComment(userId: ID!,recipeId: ID!,commentText: String!): Comments
    addRating(userId: ID!,recipeId: ID!, ratingValue: Int!): Boolean!
    deleteComment(commentId: ID!): Boolean!
}

type Comments{
    id: ID!
    commentText: String!
    user: Users
    recipe: Recipe
}

type Favorite{
    id: FavoriteKey!
    user: Users
    recipe: Recipe
}

type FavoriteKey{
    userId: ID!
    recipeId: ID!
}

type Image{
    id: ID!
    link: String!
    orderNumber: Int
    recipe: Recipe!
}

type Ingredient{
    id: ID!
    ingredientName: String!
    quantity: Int!
    measure: String!
    recipe: Recipe!
}

type Rating{
    id: RatingKey!
    ratingValue: Int!
    user: Users!
    recipe: Recipe!
}

type RatingKey{
    userId: ID!
    recipeId: ID!
}

type Recipe{
    id: ID!
    coverPicture: String!
    recipeName: String!
    description: String!
    isApprooved: Boolean!
    cookingDuration: Int!
    user: Users!
    recipeSteps: [RecipeStep] @relation
    ingredients: [Ingredient] @relation
    images: [Image] @relation
    videos: [Video] @relation
    ratings: [Rating] @relation
    comments: [Comments] @relation
    favoriteTo: [Favorite] @relation
    averageRating: Float
    isLikedByCurrentUser: Boolean
    ratingFromCurrentUser: Int!
}

type RecipeStep{
    id: ID!
    stepDescription: String!
    orderNumber: Int!
    recipe: Recipe!
}

type Role{
    id: ID!
    roleName: Roles!
    users: [Users] @relation
}

enum Roles{
    USER
    MODERATOR
}

type Users{
    id: ID!
    username: String!
    eMail: String!
    password: String!
    profilePicture: String!
    isBanned: Boolean!
    isConfirmed: Boolean!
    role: Role!
    recipes: [Recipe] @relation
    ratings: [Rating] @relation
    comments: [Comments] @relation
    favorites: [Favorite] @relation
}

type Video{
    id: ID!
    link: String!
    orderNumber: Int!
    recipe: Recipe!
}

type LoginResponse{
    user: Users!
    token: String!
}

type Recipes{
    recipes: [Recipe]!
    numberOfPages: Int!
    currentIndex: Int!
}

input RegisterRequest{
    username: String!
    eMail: String!
    password: String!
    profilePicture: String
}

input RecipePayload{
    userId: ID!
    recipeName: String!
    description: String!
    coverPicture: String
    cookingDuration: Int!
    ingredients: [IngredientPayload]!
    steps: [String]!
    images: [String]
    video: String
    videoExtension: String
}

input IngredientPayload{
    ingredientName: String!
    quantity: Int!
    measure: String!
}

input Filter{
    authorId: ID
    index: Int!
    orderBy: String
    nameLike: String
    maxCookingDuration: Int
    canContainIngredients: [String]
    mustNotContaintIngredients: [String]
}